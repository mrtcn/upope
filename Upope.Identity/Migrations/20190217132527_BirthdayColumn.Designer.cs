// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Upope.Identity.DbContext;

namespace Upope.Identity.Migrations
{
    [DbContext(typeof(ApplicationUserDbContext))]
    [Migration("20190217132527_BirthdayColumn")]
    partial class BirthdayColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Upope.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Gender");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "93a24297-517c-4ad0-aabc-7a966596ef5e",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "032d3f7b-581a-4f69-94d0-88b23a09ff5f",
                            Email = "muratcantuna1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA1@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna1"
                        },
                        new
                        {
                            Id = "4d203499-b970-40a7-971d-615c5591954a",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d46e8582-d439-49c3-88ed-689674ebfa6a",
                            Email = "muratcantuna2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA2@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna2"
                        },
                        new
                        {
                            Id = "9e2cce73-437c-48df-861a-32f30613d037",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b4a8150a-2ad8-44ec-9eec-d81cc1ad8741",
                            Email = "muratcantuna3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA3@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA3",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna3"
                        },
                        new
                        {
                            Id = "4f138d8f-5455-4ea0-b0a3-abaf68d932a6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2af35340-0a9f-47d5-a97c-318fcc81a6fb",
                            Email = "muratcantuna4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA4@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna4"
                        },
                        new
                        {
                            Id = "618ccbe1-552d-4db6-9e96-f7f31ade1b3b",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4a345144-c543-4973-92c7-49793b784c9e",
                            Email = "muratcantuna5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA5@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA5",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna5"
                        },
                        new
                        {
                            Id = "b356afb5-8bd4-4bc5-9fe7-69383b2dc510",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "96837039-80c1-4ea6-a61b-2e58d3649c54",
                            Email = "muratcantuna6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA6@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA6",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna6"
                        },
                        new
                        {
                            Id = "6781d50a-2b32-4c86-9c31-fb36da3c3673",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "caa02093-c61c-4228-982c-ddc15de41f70",
                            Email = "muratcantuna7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA7@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA7",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna7"
                        },
                        new
                        {
                            Id = "5a9e8b5c-d6a1-454c-92df-9f207b49c6fa",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "51352b74-ae9d-4dc6-a0fe-bcaa7e128c59",
                            Email = "muratcantuna8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA8@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna8"
                        },
                        new
                        {
                            Id = "3b7347a3-4b25-4ae6-b8a6-8cb7f99b2a2c",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7b642fae-ea93-4ade-8d8f-e78c2ed7e0ff",
                            Email = "muratcantuna9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA9@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA9",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna9"
                        },
                        new
                        {
                            Id = "25a8971b-b04d-4ddc-9fd3-01e194628bf2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2e4aa312-48bd-43a0-9d56-93a52f171bf7",
                            Email = "muratcantuna10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA10@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA10",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
