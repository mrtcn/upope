// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Upope.Identity.DbContext;

namespace Upope.Identity.Migrations
{
    [DbContext(typeof(ApplicationUserDbContext))]
    partial class ApplicationUserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Upope.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Gender");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nickname")
                        .HasMaxLength(250);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "11716157-ed82-43b2-8454-50b55623a15c",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0ba1c110-5ee6-459f-acd1-2af3f2ebf55e",
                            Email = "muratcantuna1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA1@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna1"
                        },
                        new
                        {
                            Id = "c4d18448-6ac8-421d-9349-2249d6d9b32a",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ab957668-dfa7-422e-ac5c-027104f96721",
                            Email = "muratcantuna2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA2@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna2"
                        },
                        new
                        {
                            Id = "52e40b92-928e-4861-b84c-9ba41fc03bc6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6b714b77-d19b-4a53-9e67-182694f2f5be",
                            Email = "muratcantuna3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA3@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA3",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna3"
                        },
                        new
                        {
                            Id = "430c9a05-d533-4ffa-a424-719702fef001",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e7b4d62b-ee09-49ef-9b0a-0da907a19ef2",
                            Email = "muratcantuna4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA4@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna4"
                        },
                        new
                        {
                            Id = "266dab5c-8361-4beb-94fa-431e9174f3f9",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a51cbff7-1021-42d2-a766-971ea2cb442c",
                            Email = "muratcantuna5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA5@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA5",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna5"
                        },
                        new
                        {
                            Id = "3232b60f-dd51-46e7-878b-b5568e1d08e6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "228e6a4e-c050-41cc-91e8-62ce1fed859e",
                            Email = "muratcantuna6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA6@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA6",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna6"
                        },
                        new
                        {
                            Id = "e5a7885c-97c7-4200-b87d-68f94c2caa69",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4068088a-b302-489a-8a8b-981e36be7bee",
                            Email = "muratcantuna7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA7@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA7",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna7"
                        },
                        new
                        {
                            Id = "d92cff90-357a-463f-961e-f980ff40ff91",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "730c90a7-cb7c-47d7-b5c5-d6064752e792",
                            Email = "muratcantuna8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA8@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna8"
                        },
                        new
                        {
                            Id = "75b9d964-9c08-4ca5-b220-c09bfc9e8a30",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "28977ff2-e3e4-4dd6-95c6-9366621fe630",
                            Email = "muratcantuna9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA9@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA9",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna9"
                        },
                        new
                        {
                            Id = "673c4176-18c5-4ac8-b3c8-49e2775db350",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2bdebbaf-0c84-4750-87a0-4be4fe3a63f7",
                            Email = "muratcantuna10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA10@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA10",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
