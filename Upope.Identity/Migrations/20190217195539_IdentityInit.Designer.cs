// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Upope.Identity.DbContext;

namespace Upope.Identity.Migrations
{
    [DbContext(typeof(ApplicationUserDbContext))]
    [Migration("20190217195539_IdentityInit")]
    partial class IdentityInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Upope.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Gender");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(250);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0fc04ca0-cc8d-4896-a50d-b9fe247cf152",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6d77fe32-7856-4b9f-b404-4c0b608b926d",
                            Email = "muratcantuna1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA1@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna1"
                        },
                        new
                        {
                            Id = "3282d1a0-ed0e-4f8a-8720-8f3474c21ecf",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c4c69d08-5c9a-4458-868f-17021d0a4b0f",
                            Email = "muratcantuna2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA2@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna2"
                        },
                        new
                        {
                            Id = "ad687285-5202-4f81-8220-0a424dae3566",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "88429df2-76b3-464a-afc9-153cded3430b",
                            Email = "muratcantuna3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA3@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA3",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna3"
                        },
                        new
                        {
                            Id = "897b2d91-6c1a-4bed-a4fc-9e84441e4b2d",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b3c78a3d-8de9-40f3-96c5-ef418c003ed3",
                            Email = "muratcantuna4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA4@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna4"
                        },
                        new
                        {
                            Id = "5961efe4-8ad8-488f-8727-022417b612a0",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "dce0bfcc-8dfa-4080-ac51-56c2f895bbed",
                            Email = "muratcantuna5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA5@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA5",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna5"
                        },
                        new
                        {
                            Id = "d589a0cf-7172-4b44-bb49-609fcc7d56be",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "57faa83d-4ea0-436f-8138-520977033f22",
                            Email = "muratcantuna6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA6@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA6",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna6"
                        },
                        new
                        {
                            Id = "e21b42d9-ca1f-49d5-b2f8-565a1bff3754",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2a54ef71-8908-48b4-be9a-ba67e580caf4",
                            Email = "muratcantuna7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA7@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA7",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna7"
                        },
                        new
                        {
                            Id = "b41b9a6b-00da-46dc-8115-67066009b211",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "83ce299a-3030-40ff-98f5-4f1603117414",
                            Email = "muratcantuna8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA8@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna8"
                        },
                        new
                        {
                            Id = "3eec55e4-3f38-4191-b43f-ba950108b296",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "41e0f628-d542-4c32-9291-096fd4d6bd26",
                            Email = "muratcantuna9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA9@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA9",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna9"
                        },
                        new
                        {
                            Id = "04dc0f14-65ce-4d93-8505-124d9f3b9276",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 12, 16, 12, 23, 26, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e29f5149-3db0-4946-83f6-7c17bf4653b8",
                            Email = "muratcantuna10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = 1,
                            LastName = "Tuna",
                            LockoutEnabled = true,
                            NormalizedEmail = "MURATCANTUNA10@GMAIL.COM",
                            NormalizedUserName = "MURATCANTUNA10",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwm9j42G7b3gTRJJiYW4YoO2Rw8AezwRHbOOhW7jGjhP2JOQoAm++6csGS7kOVSlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36IOAJVIVOFKWA6ZZRIC6RJCANRROVHD",
                            TwoFactorEnabled = false,
                            UserName = "muratcantuna10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Upope.Identity.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
